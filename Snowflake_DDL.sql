-- Load files to an S3 bucket 

-- Create a stage object

-- Create a task to truncate the landing table
CREATE OR REPLACE TASK TRUNC_LND_USER_JSON
  WAREHOUSE = PRACTICEWH
  SCHEDULE = '10 minute'
AS 
    TRUNCATE TABLE LND_USER_JSON
;

-- Create a task that copies into a variant column in Snowflake
CREATE OR REPLACE TASK LND_USER_JSON
  WAREHOUSE = PRACTICEWH
  AFTER TRUNC_LND_USER_JSON
AS 
    COPY INTO LND_USER_JSON
    FROM @STAGE_USER_JSON
    FILE_FORMAT = (TYPE = 'JSON' STRIP_OUTER_ARRAY = TRUE)
    --FORCE = TRUE
; -- This will detect an updated file

CREATE OR REPLACE TASK LOAD_D_USER
  WAREHOUSE = PRACTICEWH
  AFTER LND_USER_JSON
AS 
  CALL SP_LOAD_D_USER()
;

-- How do we set a task to active?
SHOW TASKS
;

ALTER TASK LOAD_D_USER RESUME
;
ALTER TASK LND_USER_JSON RESUME
;
ALTER TASK TRUNC_LND_USER_JSON RESUME
;

ALTER TASK TRUNC_LND_USER_JSON SUSPEND
;
ALTER TASK LND_USER_JSON SUSPEND
;
ALTER TASK LOAD_D_USER SUSPEND
;

-- Can we see this history?
select *
  from table(information_schema.task_history())
  order by scheduled_time DESC
  ;

SELECT * 
-- DELETE
FROM LND_USER_JSON
;
-- 2 json records, 2nd file was detected and loaded.

-- Decompose json array into db columns
-- Create a users table that will serve as our source for user data
CREATE OR REPLACE TABLE D_USER (
USER_UID INT IDENTITY START 1 INCREMENT 1,
USERID INT,
EMAILADDRESS VARCHAR(100),
LASTNAME VARCHAR(100),
FIRSTNAME VARCHAR(100),
PHONENUMBER VARCHAR(25),
CREATION_TS TIMESTAMP,
UPDATE_TS TIMESTAMP,
ACTIVE_FL BOOLEAN DEFAULT TRUE)
;

INSERT INTO D_USER (
USERID,
EMAILADDRESS,
LASTNAME,
FIRSTNAME,
PHONENUMBER,
CREATION_TS)
SELECT 
T1.VALUE:userId as userId,
T1.VALUE:emailAddress as emailAddress,
T1.VALUE:lastName as lastName,
T1.VALUE:firstName as firstName,
T1.VALUE:phoneNumber as phoneNumber,
CURRENT_TIMESTAMP() as CREATION_TS
FROM JSON_FILES_RAW
,LATERAL FLATTEN (input => "JSON_DATA") AS T0
,LATERAL FLATTEN (input => T0.value) AS T1 
WHERE NOT EXISTS (SELECT 1 FROM D_USER S1 
WHERE S1.USERID = T1.VALUE:userId )
;

-- Confirm data
SELECT * 
-- DELETE
FROM D_USER
;


-- *** See separate table for SP_LOAD_D_USER

-- Insert users where doesn't already exist
DELETE FROM D_USER
;

INSERT INTO D_USER (USERID,
        EMAILADDRESS,
        LASTNAME,
        FIRSTNAME,
        PHONENUMBER,
        CREATION_TS)
SELECT S1.USERID,
TRIM(S1.EMAILADDRESS,'"'),
TRIM(S1.LASTNAME,'"'),
TRIM(S1.FIRSTNAME,'"'),
TRIM(S1.PHONENUMBER,'"'),
CURRENT_TIMESTAMP() as CREATION_TS
FROM (SELECT L1.VALUE:userId as userId,
        L1.VALUE:emailAddress as emailAddress,
        L1.VALUE:lastName as lastName,
        L1.VALUE:firstName as firstName,
        L1.VALUE:phoneNumber as phoneNumber
      FROM JSON_FILES_RAW
      ,LATERAL FLATTEN (input => "JSON_DATA") AS L0
      ,LATERAL FLATTEN (input => L0.value) AS L1 ) S1
LEFT OUTER JOIN D_USER T1
ON S1.USERID = T1.USERID
WHERE T1.USERID IS NULL
;

-- Update where exists but there are differences/updates
  UPDATE D_USER 
        SET D_USER.EMAILADDRESS = TRIM(S1.EMAILADDRESS,'"'),
        D_USER.LASTNAME = TRIM(S1.LASTNAME,'"'),
        D_USER.FIRSTNAME = TRIM(S1.FIRSTNAME,'"'),
        D_USER.PHONENUMBER = TRIM(S1.PHONENUMBER,'"'),
        UPDATE_TS = CURRENT_TIMESTAMP()
        FROM (SELECT L1.VALUE:userId as userId,
                L1.VALUE:emailAddress as emailAddress,
                L1.VALUE:lastName as lastName,
                L1.VALUE:firstName as firstName,
                L1.VALUE:phoneNumber as phoneNumber
              FROM LND_USER_JSON
              ,LATERAL FLATTEN (input => "JSON_DATA") AS L0
              ,LATERAL FLATTEN (input => L0.value) AS L1 ) S1
        WHERE S1.USERID = D_USER.USERID
        AND (D_USER.EMAILADDRESS != TRIM(S1.EMAILADDRESS,'"')
        OR D_USER.LASTNAME != TRIM(S1.LASTNAME,'"')
        OR D_USER.FIRSTNAME != TRIM(S1.FIRSTNAME,'"')
        OR D_USER.PHONENUMBER != TRIM(S1.PHONENUMBER,'"'))
        ;
        
CALL SP_LOAD_D_USER()
;

-- Create a table to capture runtime metadata
CREATE OR REPLACE TABLE DATA_LOAD_HISTORY (
RUN_ID INT,
TARGET_TABLE_NAME VARCHAR(100),
LOAD_PROCEDURE_NAME VARCHAR(100),
LOAD_START_TS TIMESTAMP,
LOAD_END_TS TIMESTAMP,
ROWS_INSERTED INT DEFAULT 0,
ROWS_UPDATED INT DEFAULT 0)
;

CREATE OR REPLACE TABLE DATA_LOAD_EXCEPTION (
RUN_ID INT,
EXCEPTION_TS TIMESTAMP,
RECORD_CREATION_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
ERR_MSG VARCHAR(1000))
;

-- Insert default record 
INSERT INTO DATA_LOAD_HISTORY (RUN_ID,
TARGET_TABLE_NAME,
LOAD_PROCEDURE_NAME,
LOAD_START_TS,
LOAD_END_TS)
VALUES (0,
'DEFAULT',
'DEFAULT',
CURRENT_TIMESTAMP(),
CURRENT_TIMESTAMP())
;